/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ImageWidthSlider
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// src/settings/settings.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  sliderPercentage: "50",
  sliderPercentageDefault: "50",
  sliderWidth: "150",
  unit: "%",
  sliderEnabled: true
};
var ImageWidthSliderSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  // this.settings.sliderWidth
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Slider Width").setDesc("How wide do you want your slider to be?").addText((text) => text.setPlaceholder("Slider width in px").setValue(this.plugin.settings.sliderWidth).onChange(async (value) => {
      this.plugin.settings.sliderWidth = value;
      this.plugin.updateSliderStyle();
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Slider Default Percentage").setDesc("What do you want the default percentage of the slider to be?").addText((text) => text.setPlaceholder("Slider width in px").setValue(this.plugin.settings.sliderPercentageDefault).onChange(async (value) => {
      this.plugin.settings.sliderPercentageDefault = value;
      this.plugin.updateSliderStyle();
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Width Unit").setDesc("Select the unit for adjusting image width").addDropdown((drop) => drop.addOptions({ "%": "Percent", "px": "Pixels", "vw": "Viewport Width" }).setValue(this.plugin.settings.unit).onChange(async (value) => {
      this.plugin.settings.unit = value;
      this.plugin.updateImageStyle();
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Note:").setDesc(`The field should be named "image-width" in the YAML frontmatter of the note in order to customize the image width of that respective note. It won't work globally for all notes unless you specify it in each note's frontmatter.`);
  }
};

// src/modal/warning.ts
var import_obsidian2 = require("obsidian");
var WarningModal = class extends import_obsidian2.Modal {
  constructor(app2) {
    super(app2);
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.setText("Image width must be a number from 0 to 100!");
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/main.ts
var ImageWidthSlider = class extends import_obsidian3.Plugin {
  constructor() {
    super(...arguments);
    this.pattern = /^(?:[0-9]{1,2}|100)$/;
  }
  // most important function, this gets executed everytime the plugin is first 
  // loaded, e.g. when obsidian starts, or when the user just installed the 
  // plugin
  async onload() {
    await this.loadSettings();
    this.addStyle();
    this.app.workspace.on("file-open", () => {
      this.updateImageStyleYAML();
    });
    this.createSlider();
    this.addSettingTab(new ImageWidthSliderSettingTab(this.app, this));
  }
  // async onLoadFile(file: TFile) {
  // }
  onunload() {
    this.cleanUpResources();
  }
  // ---------------------------- SLIDER -------------------------------------
  createSlider() {
    const slider = document.createElement("input");
    slider.classList.add("image-width-slider");
    slider.id = "image-width-slider";
    slider.type = "range";
    slider.min = "0";
    slider.max = "100";
    slider.value = this.settings.sliderPercentage;
    slider.style.width = this.settings.sliderWidth + "px";
    slider.addEventListener("input", (event) => {
      const value = parseInt(slider.value);
      this.settings.sliderPercentage = value.toString();
      this.saveSettings();
      if (this.settings.sliderEnabled) {
        this.updateImageStyle();
      }
      sliderValueText.textContent = value.toString();
      console.log("Slider value:", value);
    });
    const sliderValueText = document.createElement("span");
    sliderValueText.textContent = slider.value;
    sliderValueText.classList.add("image-width-slider-value");
    sliderValueText.id = "image-width-slider-value";
    sliderValueText.style.color = "white";
    sliderValueText.style.padding = "4px 3px";
    sliderValueText.style.display = "inline";
    sliderValueText.style.borderRadius = "18%";
    sliderValueText.style.border = "0";
    sliderValueText.style.margin = "0px 5px";
    sliderValueText.style.background = "var(--interactive-accent)";
    sliderValueText.style.fontSize = "9px";
    sliderValueText.style.lineHeight = "50%";
    sliderValueText.style.width = "auto";
    sliderValueText.style.height = "auto";
    sliderValueText.style.boxSizing = "content-box";
    sliderValueText.style.transition = "background 0.3s";
    sliderValueText.style.cursor = "pointer";
    sliderValueText.addEventListener("mouseenter", function() {
      sliderValueText.style.background = "red";
    });
    sliderValueText.addEventListener("mouseleave", function() {
      sliderValueText.style.background = "var(--interactive-accent)";
    });
    sliderValueText.addEventListener("click", () => {
      this.resetImageWidth();
    });
    const toggleButton = document.createElement("button");
    toggleButton.id = "image-width-slider-toggle";
    toggleButton.textContent = this.settings.sliderEnabled ? "Disable" : "Enable";
    toggleButton.style.marginLeft = "5px";
    toggleButton.addEventListener("click", () => {
      this.settings.sliderEnabled = !this.settings.sliderEnabled;
      toggleButton.textContent = this.settings.sliderEnabled ? "Disable" : "Enable";
      if (this.settings.sliderEnabled) {
        this.updateImageStyleYAML();
      } else {
        this.removeImageStyle();
      }
      this.saveSettings();
    });
    const statusBarItemEl = this.addStatusBarItem();
    statusBarItemEl.appendChild(slider);
    statusBarItemEl.appendChild(sliderValueText);
    statusBarItemEl.appendChild(toggleButton);
  }
  // ---------------------------- SLIDER -------------------------------------
  cleanUpResources() {
    this.resetImageWidth();
    this.removeImageStyle();
  }
  resetImageWidth() {
    this.settings.sliderPercentage = this.settings.sliderPercentageDefault;
    const styleElements = document.getElementsByClassName("image-width-slider");
    const slider = document.getElementById("image-width-slider");
    const sliderValue = document.getElementById("image-width-slider-value");
    if (slider) {
      if (sliderValue) {
        slider.value = this.settings.sliderPercentageDefault;
        sliderValue.textContent = this.settings.sliderPercentageDefault.toString();
      }
    }
    this.saveSettings();
    if (this.settings.sliderEnabled) {
      this.updateImageStyleYAML();
    } else {
      this.removeImageStyle();
    }
  }
  // add element that contains all of the styling elements we need
  addStyle() {
    const css = document.createElement("style");
    css.id = "additional-image-css";
    document.getElementsByTagName("head")[0].appendChild(css);
    document.body.classList.add("image-width-slider-target");
  }
  // update the styles (at the start, or as the result of a settings change)
  updateImageStyle() {
    if (!this.settings.sliderEnabled) {
      return;
    }
    const styleElement = document.getElementById("additional-image-css");
    if (!styleElement)
      throw "additional-image-css element not found!";
    const unit = this.settings.unit;
    styleElement.innerText = `
.image-width-slider-target img:not(.oit-img-view):not(.oit-img):not(.gallery-img):not([class*="widget"]) {
width: ${this.settings.sliderPercentage}${unit} !important;
}
`;
  }
  // update the styles (at the start, or as the result of a settings change)
  updateImageStyleYAMLHelper(imageWidth) {
    if (!this.settings.sliderEnabled) {
      return;
    }
    const styleElement = document.getElementById("additional-image-css");
    if (!styleElement)
      throw "additional-image-css element not found!";
    const unit = this.settings.unit;
    styleElement.innerText = `
                        .image-width-slider-target img:not(.oit-img-view):not(.oit-img):not(.gallery-img):not([class*="widget"]) {
                                width: ${imageWidth}${unit} !important;
                        }
                `;
  }
  validateString(inputString) {
    return this.pattern.test(inputString);
  }
  updateImageStyleYAML() {
    if (!this.settings.sliderEnabled) {
      this.removeImageStyle();
      return;
    }
    const file = this.app.workspace.getActiveFile();
    if (file.name) {
      const metadata = app.metadataCache.getFileCache(file);
      if (metadata) {
        if (metadata.frontmatter) {
          try {
            if (metadata.frontmatter["image-width"]) {
              if (this.validateString(metadata.frontmatter["image-width"])) {
                this.updateImageStyleYAMLHelper(metadata.frontmatter["image-width"]);
              } else {
                new WarningModal(this.app).open();
                throw new Error("Image width must be a number from 0 to 100.");
              }
            } else {
              this.updateImageStyle();
            }
          } catch (e) {
            console.error("Error:", e.message);
          }
        } else {
          this.updateImageStyle();
        }
      }
    }
  }
  // update the styles (at the start, or as the result of a settings change)
  updateSliderStyle() {
    const styleElements = document.getElementsByClassName("image-width-slider");
    if (styleElements.length === 0) {
      throw new Error("image-width-slider-value element not found!");
    } else {
      const styleElement = styleElements[0];
      styleElement.style.width = this.settings.sliderWidth + "px";
    }
  }
  removeImageStyle() {
    const styleElement = document.getElementById("additional-image-css");
    if (styleElement) {
      styleElement.innerText = "";
    }
  }
  // Method to load settings
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  // Method to store settings
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
